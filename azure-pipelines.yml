trigger:
  - main

pool:
  vmImage: "ubuntu-latest"

variables:
  solution: "**/*.sln"
  buildPlatform: "Any CPU"
  buildConfiguration: "Release"
  majorVersion: 1
  minorVersion: 0
  patchVersion: $[counter(format('{0}.{1}', variables['majorVersion'], variables['minorVersion']), 0)]
  version: $(majorVersion).$(minorVersion).$(patchVersion)

name: $(version)

steps:
  - task: UseDotNet@2
    inputs:
      packageType: "sdk"
      version: "8.0.x"

  - task: DotNetCoreCLI@2
    displayName: 'Restore packages'
    inputs:
      command: 'restore'
      projects: '$(solution)'

  - task: DotNetCoreCLI@2
    displayName: 'Build solution'
    inputs:
      command: 'build'
      projects: '$(solution)'
      arguments: '--configuration $(buildConfiguration) --no-restore'

  # TODO: Add test execution here

  - task: DotNetCoreCLI@2
    displayName: 'Pack NuGet package'
    inputs:
      command: "pack"
      packagesToPack: "Htmx.Components.csproj"
      versioningScheme: "byBuildNumber"
      configuration: "$(buildConfiguration)"

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifacts'
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)"
      ArtifactName: "drop"
      publishLocation: "Container"

  - task: DotNetCoreCLI@2
    displayName: 'Push to NuGet.org'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    inputs:
      command: 'custom'
      custom: 'nuget'
      arguments: 'push $(Build.ArtifactStagingDirectory)/**/*.nupkg --api-key $(NUGET_API_KEY) --source https://api.nuget.org/v3/index.json --skip-duplicate'
    env:
      NUGET_API_KEY: $(NUGET_API_KEY)
